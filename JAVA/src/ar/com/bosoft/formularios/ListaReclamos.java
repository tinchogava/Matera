/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.bosoft.formularios;

import ar.com.bosoft.DataSources.ReclamoExternoDataSource;
import ar.com.bosoft.DataSources.ReclamoInternoDataSource;
import ar.com.bosoft.RenderTablas.DateRenderer;
import ar.com.bosoft.clases.Reporte;
import ar.com.bosoft.clases.Utiles;
import static ar.com.bosoft.formularios.Principal.dp;
import ar.com.matera.TableModels.ReclamoTableModel;
import java.awt.event.FocusEvent;
import java.beans.PropertyVetoException;
import java.io.File;
import matera.TableObjects.ReclamoTableObject;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableRowSorter;
import matera.cache.CacheProveedores;
import matera.cache.CacheReclamoExterno;
import matera.cache.CacheReclamoInterno;
import matera.db.managers.ReclamoMgr;
import matera.gui.combobox.ComboBoxMgr;
import matera.jooq.tables.records.ProveedorRecord;

/**
 *
 * @author tinchogava
 */
public class ListaReclamos extends javax.swing.JInternalFrame {
    ReclamoTableModel modeloReclamo;
    TableRowSorter sorterReclamo;
    TableCellRenderer tableCellRenderer;
    SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
    List<ReclamoTableObject> reclamos;
    int salida, copias;
    String nombreArchivo, impresora, fechaCirugia, fechaNotificacion, fechaDevolucion;

    /**
     * Creates new form ListaReclamos
     */
    public ListaReclamos() {
        initComponents();
        modeloReclamo = new ReclamoTableModel();
        modeloReclamo.getPropertiesFromDefaultModel(jTableReclamos.getModel());
        jTableReclamos.setModel(modeloReclamo);
        sorterReclamo = new TableRowSorter(modeloReclamo);
        jTableReclamos.setRowSorter (sorterReclamo);
        tableCellRenderer = new DateRenderer();
        jTableReclamos.getColumnModel().getColumn(1).setCellRenderer(tableCellRenderer);
        jComboBoxReclamoExterno.setEnabled(false);
        jComboBoxReclamoInterno.setEnabled(false);
        
        ComboBoxMgr.fillReclamoExternoCombo(jComboBoxReclamoExterno, true);
        ComboBoxMgr.fillReclamoInternoCombo(jComboBoxReclamoInterno, true);
               
        fillTablaReclamos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableReclamos = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jBtnFiltrar = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jDesde = new com.toedter.calendar.JDateChooser("dd/MM/20yy", "##/##/####", '_');
        this.jDesde.getJCalendar().setTodayButtonVisible(true); 
        this.jDesde.getJCalendar().setTodayButtonText("Hoy"); 
        this.jDesde.getJCalendar().setWeekOfYearVisible(false);
        jHasta = new com.toedter.calendar.JDateChooser("dd/MM/20yy", "##/##/####", '_');
        this.jHasta.getJCalendar().setTodayButtonVisible(true); 
        this.jHasta.getJCalendar().setTodayButtonText("Hoy"); 
        this.jHasta.getJCalendar().setWeekOfYearVisible(false);
        jLabel9 = new javax.swing.JLabel();
        jTxtReclamo = new javax.swing.JFormattedTextField();
        jRadioButtonInterno = new javax.swing.JRadioButton();
        jRadioButtonExterno = new javax.swing.JRadioButton();
        jComboBoxReclamoInterno = new javax.swing.JComboBox<>();
        jComboBoxReclamoExterno = new javax.swing.JComboBox<>();
        jPanel6 = new javax.swing.JPanel();
        jBtnScr = new javax.swing.JButton();
        jBtnImp = new javax.swing.JButton();
        jBtnPdf = new javax.swing.JButton();
        jBtnSalir = new javax.swing.JButton();

        jTableReclamos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Reclamo", "Fecha", "Clasificación", "Tipo", "Destino", "Turno"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableReclamos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableReclamosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableReclamos);

        jPanel4.setBackground(new java.awt.Color(153, 204, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Filtros"));

        jBtnFiltrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/32x32/enabled/filtrar.png"))); // NOI18N
        jBtnFiltrar.setText("Filtrar");
        jBtnFiltrar.setBorderPainted(false);
        jBtnFiltrar.setContentAreaFilled(false);
        jBtnFiltrar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jBtnFiltrar.setFocusPainted(false);
        jBtnFiltrar.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/32x32/rollover/filtrar.png"))); // NOI18N
        jBtnFiltrar.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/32x32/rollover/filtrar.png"))); // NOI18N
        jBtnFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnFiltrarActionPerformed(evt);
            }
        });

        jLabel20.setText("Nº de Reclamo");

        jLabel8.setText("Desde");

        jLabel9.setText("Hasta");

        jTxtReclamo.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#"))));
        jTxtReclamo.setToolTipText("Buscar los remitos de este presupuesto");
        jTxtReclamo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtReclamoFocusLost(evt);
            }
        });
        jTxtReclamo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTxtReclamoKeyTyped(evt);
            }
        });

        buttonGroup1.add(jRadioButtonInterno);
        jRadioButtonInterno.setText("Interno");
        jRadioButtonInterno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonInternoActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButtonExterno);
        jRadioButtonExterno.setText("Externo");
        jRadioButtonExterno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonExternoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addComponent(jRadioButtonInterno)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jRadioButtonExterno)
                                .addGap(3, 3, 3)))
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBoxReclamoInterno, 0, 124, Short.MAX_VALUE)
                            .addComponent(jComboBoxReclamoExterno, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jDesde, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jHasta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(43, 43, 43)
                        .addComponent(jLabel20)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jTxtReclamo, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jBtnFiltrar))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel8)
                            .addComponent(jDesde, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jHasta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButtonInterno)
                            .addComponent(jComboBoxReclamoInterno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButtonExterno)
                            .addComponent(jComboBoxReclamoExterno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel20)
                            .addComponent(jTxtReclamo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBtnFiltrar)))
                .addGap(1, 1, 1))
        );

        jPanel6.setBackground(new java.awt.Color(153, 204, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Salida"));

        jBtnScr.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/48x48/enabled/pantalla.png"))); // NOI18N
        jBtnScr.setBorder(null);
        jBtnScr.setBorderPainted(false);
        jBtnScr.setContentAreaFilled(false);
        jBtnScr.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jBtnScr.setFocusPainted(false);
        jBtnScr.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/48x48/rollover/pantalla.png"))); // NOI18N
        jBtnScr.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/48x48/rollover/pantalla.png"))); // NOI18N
        jBtnScr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnScrActionPerformed(evt);
            }
        });

        jBtnImp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/48x48/enabled/impresora.png"))); // NOI18N
        jBtnImp.setBorder(null);
        jBtnImp.setBorderPainted(false);
        jBtnImp.setContentAreaFilled(false);
        jBtnImp.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jBtnImp.setFocusPainted(false);
        jBtnImp.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/48x48/rollover/impresora.png"))); // NOI18N
        jBtnImp.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/48x48/rollover/impresora.png"))); // NOI18N
        jBtnImp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnImpActionPerformed(evt);
            }
        });

        jBtnPdf.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/48x48/enabled/pdf.png"))); // NOI18N
        jBtnPdf.setBorder(null);
        jBtnPdf.setBorderPainted(false);
        jBtnPdf.setContentAreaFilled(false);
        jBtnPdf.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jBtnPdf.setFocusPainted(false);
        jBtnPdf.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/48x48/rollover/pdf.png"))); // NOI18N
        jBtnPdf.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/48x48/rollover/pdf.png"))); // NOI18N
        jBtnPdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnPdfActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jBtnScr, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtnImp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtnPdf, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jBtnScr)
            .addComponent(jBtnImp)
            .addComponent(jBtnPdf)
        );

        jBtnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/32x32/enabled/salir.png"))); // NOI18N
        jBtnSalir.setText("Salir");
        jBtnSalir.setBorderPainted(false);
        jBtnSalir.setContentAreaFilled(false);
        jBtnSalir.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jBtnSalir.setFocusPainted(false);
        jBtnSalir.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jBtnSalir.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/32x32/rollover/salir.png"))); // NOI18N
        jBtnSalir.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/32x32/rollover/salir.png"))); // NOI18N
        jBtnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(103, 103, 103)
                        .addComponent(jBtnSalir)))
                .addContainerGap())
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(91, 91, 91)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBtnSalir)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnFiltrarActionPerformed
        if(this.jDesde.getDate() != null && this.jHasta.getDate() != null)
            filterByDate();
        if(!this.jTxtReclamo.getText().isEmpty())
            filterById();
        if(this.jRadioButtonExterno.isSelected() || this.jRadioButtonInterno.isSelected())
            filterByType();
        if(this.jDesde.getDate() == null && 
                this.jHasta.getDate() == null && 
                this.jTxtReclamo.getText().isEmpty() && 
                !this.jRadioButtonExterno.isSelected() && 
                !this.jRadioButtonInterno.isSelected()){
            fillTablaReclamos();
        }
    }//GEN-LAST:event_jBtnFiltrarActionPerformed

    private void jTxtReclamoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtReclamoFocusLost
        if (evt.isTemporary()) {
            return;
        }

        if (evt.getID() == FocusEvent.FOCUS_LOST) {
            if (jTxtReclamo.getText() == null || jTxtReclamo.getText().isEmpty()) {
                jTxtReclamo.setValue(null);
            }
        }
        super.processFocusEvent(evt);

    }//GEN-LAST:event_jTxtReclamoFocusLost

    private void jBtnScrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnScrActionPerformed
        ReclamoTableObject rto = modeloReclamo.getRow(jTableReclamos.convertRowIndexToModel(jTableReclamos.getSelectedRow()));
        executeExit(rto, 0);
    }//GEN-LAST:event_jBtnScrActionPerformed

    private void jBtnImpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnImpActionPerformed
        //seleccionImp.setVisible(true);
        //if (seleccionImp.getSino()){
        //    imprime(1);
        //}
    }//GEN-LAST:event_jBtnImpActionPerformed

    private void jBtnPdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnPdfActionPerformed
        //Crear un objeto FileChooser
        JFileChooser fc = new JFileChooser();
        //Mostrar la ventana para abrir archivo y recoger la respuesta
        int respuesta = fc.showSaveDialog(null);
        //Comprobar si se ha pulsado Aceptar
        if (respuesta == JFileChooser.APPROVE_OPTION){
            //Crear un objeto File con el archivo elegido
            File archivoElegido = fc.getSelectedFile();
            //try {
                //this.nombreArchivo = archivoElegido.getCanonicalPath() + ".pdf";
                //print(2);
            //} catch (IOException ex) {
                JOptionPane.showMessageDialog(this,"No se ha podido crear el archivo", "Información",JOptionPane.INFORMATION_MESSAGE);
            //}
        }
    }//GEN-LAST:event_jBtnPdfActionPerformed

    private void jBtnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSalirActionPerformed

        this.dispose();
    }//GEN-LAST:event_jBtnSalirActionPerformed

    private void jRadioButtonInternoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonInternoActionPerformed
        if(jRadioButtonInterno.isSelected()){
            jComboBoxReclamoInterno.setEnabled(true);
            jComboBoxReclamoExterno.setEnabled(false);
        }
    }//GEN-LAST:event_jRadioButtonInternoActionPerformed

    private void jRadioButtonExternoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonExternoActionPerformed
        if(jRadioButtonExterno.isSelected()){
            jComboBoxReclamoExterno.setEnabled(true);
            jComboBoxReclamoInterno.setEnabled(false);
        }
    }//GEN-LAST:event_jRadioButtonExternoActionPerformed

    private void jTxtReclamoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtReclamoKeyTyped
        char c = evt.getKeyChar();
        if(c < '0' || c > '9') evt.consume();
    }//GEN-LAST:event_jTxtReclamoKeyTyped

    private void jTableReclamosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableReclamosMouseClicked
       if(evt.getClickCount() == 2){
           ReclamoTableObject rto = modeloReclamo.getRow(jTableReclamos.convertRowIndexToModel(jTableReclamos.getSelectedRow()));
           switch (modeloReclamo.getValueAt(jTableReclamos.getSelectedRow(), 2).toString()){
                case "INTERNO":
                    ReclamoInterno reclamoInterno = new ReclamoInterno(rto.getReclamo(), rto.getEntidad(), 
                            rto.getPresupuesto(), rto.getProfesional(), rto.getPrestacion());
                    reclamoInterno.setTitle("Reclamo Interno Nº" + rto.getReclamo().getIdReclamo());
                    show(reclamoInterno);
                    break;
                case "EXTERNO":
                    ReclamoExterno reclamoExterno = new ReclamoExterno(rto.getReclamo(), rto.getEntidad(), rto.getPresupuesto(),
                            rto.getProfesional(), rto.getPrestacion());
                    reclamoExterno.setTitle("Reclamo Externo Nº" + rto.getReclamo().getIdReclamo());
                    show(reclamoExterno);
                    break;
           }
                  
       }
    }//GEN-LAST:event_jTableReclamosMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jBtnFiltrar;
    private javax.swing.JButton jBtnImp;
    private javax.swing.JButton jBtnPdf;
    private javax.swing.JButton jBtnSalir;
    private javax.swing.JButton jBtnScr;
    private javax.swing.JComboBox<String> jComboBoxReclamoExterno;
    private javax.swing.JComboBox<String> jComboBoxReclamoInterno;
    private com.toedter.calendar.JDateChooser jDesde;
    private com.toedter.calendar.JDateChooser jHasta;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JRadioButton jRadioButtonExterno;
    private javax.swing.JRadioButton jRadioButtonInterno;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableReclamos;
    private javax.swing.JFormattedTextField jTxtReclamo;
    // End of variables declaration//GEN-END:variables

    private void fillTablaReclamos() {
        try {
            modeloReclamo.removeAllRows();
            modeloReclamo.fireTableDataChanged();
            
            reclamos = ReclamoMgr.getReclamos();
            
            reclamos.forEach(rto->{
                modeloReclamo.addRow(rto);
            });
            
            if (reclamos.isEmpty()){
                Utiles.showMessage("No se han encontrado resultados.");
            }     
        }
        catch(Exception ex){
            Utiles.showErrorMessage(ex);
        }
    }

    private void filterByDate() {
        java.sql.Date sinceDate, untilDate;
        sinceDate = new java.sql.Date(this.jDesde.getDate().getTime());
        untilDate = new java.sql.Date(this.jHasta.getDate().getTime());
         try {
            modeloReclamo.removeAllRows();
            modeloReclamo.fireTableDataChanged();
            
            reclamos = ReclamoMgr.getReclamosByDate(sinceDate, untilDate);
            reclamos.forEach(rto->{
                    modeloReclamo.addRow(rto);
                });

                if (reclamos.isEmpty()){
                    Utiles.showMessage("No se han encontrado resultados.");
                }
            } 
        catch(Exception ex){
            Utiles.showErrorMessage(ex);
        }
    }

    private void filterById() {
        try {
            modeloReclamo.removeAllRows();
            modeloReclamo.fireTableDataChanged();
            
            reclamos = ReclamoMgr.getReclamoById(Integer.valueOf(this.jTxtReclamo.getText()));
            reclamos.forEach(rto->{
                    modeloReclamo.addRow(rto);
                });

                if (reclamos.isEmpty()){
                    Utiles.showMessage("No se han encontrado resultados.");
                }
            } 
        catch(Exception ex){
            Utiles.showErrorMessage(ex);
        }
    }

    private void filterByType() {
        boolean sortingInterno;
        int type;
                   
        if(this.jRadioButtonInterno.isSelected()) {
            sortingInterno = this.jRadioButtonInterno.isSelected();
            if(ComboBoxMgr.getSelectedId(jComboBoxReclamoInterno).equals(Utiles.TODOS)){
                type = 0;
            } else {
                type = ComboBoxMgr.getSelectedId(jComboBoxReclamoInterno);
            }
        } else {
            sortingInterno = this.jRadioButtonInterno.isSelected();
            if(ComboBoxMgr.getSelectedId(jComboBoxReclamoExterno).equals(Utiles.TODOS)){
                type = 0;
            } else {
                type = ComboBoxMgr.getSelectedId(jComboBoxReclamoExterno);
            }
            
        }
        
        try {
            modeloReclamo.removeAllRows();
            modeloReclamo.fireTableDataChanged();
            
            reclamos = ReclamoMgr.getReclamosByType(sortingInterno, type);
            reclamos.forEach(rto->{
                    modeloReclamo.addRow(rto);
                });

                if (reclamos.isEmpty()){
                    Utiles.showMessage("No se han encontrado resultados.");
                }
            } 
        catch(Exception ex){
            Utiles.showErrorMessage(ex);
        }
    }
    
    public static void show(JInternalFrame form){
        int x = (Principal.dp.getWidth() / 2) - (form.getWidth() / 2);
        int y = (Principal.dp.getHeight() / 2) - (form.getHeight() / 2);
        
        form.setLocation(x, y);
        
        if (!form.isShowing()) {
            dp.add(form);
            form.show();
            form.setClosable(true);
            form.setMaximizable(true);
            form.setAutoscrolls(true);            
            try {
                form.setMaximum(true);

            } catch (PropertyVetoException ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }   
        }        
    }

    private void print(int salida) {
        
    }

    private void executeExit(ReclamoTableObject rto, int salida) {
        Map param=new HashMap();
        Reporte reporte = new Reporte();
        switch (modeloReclamo.getValueAt(jTableReclamos.getSelectedRow(), 2).toString()){
                case "INTERNO":
                    param.put("id_reclamo", rto.getReclamo().getIdReclamo());
                    if (rto.getReclamo().getIdPresupuesto() != 0){
                        param.put("id_cirugia", rto.getReclamo().getIdPresupuesto());
                    } else {
                        param.put("id_cirugia", "No detallado");
                    }
                    param.put("tipoReclamo", CacheReclamoInterno.instance().getReclamoInterno(rto.getReclamo().getIdReclamointerno()));
                    if (rto.getPresupuesto().getPaciente().isEmpty()){
                        param.put("paciente", "No detallado");
                        
                    } else {
                        param.put("paciente", rto.getPresupuesto().getPaciente());
                    }
                    if (rto.getPresupuesto().getIdProfesional1() != 0){
                        param.put("profesional", rto.getProfesional().getNombre());
                    } else {
                        param.put("profesional", "No detallado");
                    }
                    if (rto.getPresupuesto().getIdPrestacion() != 0){
                        param.put("prestacion", rto.getPrestacion().getNombre());
                    } else {
                        param.put("prestacion", "No detallado");
                    }
                    if (rto.getPresupuesto().getIdLugarcirugia() != 0){
                        param.put("lugarCirugia", rto.getEntidad().getNombre());
                    } else {
                        param.put("lugarCirugia", "No detallado");
                    }
                    param.put("sectorReclamo", rto.getReclamo().getDestinoreclamo().toUpperCase());
                    param.put("descripcion", rto.getReclamo().getDescripcion());
                    param.put("procedimientos", rto.getReclamo().getProcedimiento());
                    param.put("acciones", rto.getReclamo().getAcciones());
                    param.put("fechaReclamo", format.format(rto.getReclamo().getFechareclamo()));
                    java.sql.Date fecha = rto.getPresupuesto().getFechacirugia();
                    if (rto.getPresupuesto().getFechacirugia() == null){
                        param.put("fechaCirugia", "No detallada");
                        fechaCirugia = "No detallada";
                    } else {
                        param.put("fechaCirugia", format.format(rto.getPresupuesto().getFechacirugia()));
                        fechaCirugia = format.format(rto.getPresupuesto().getFechacirugia());
                    }

                     ReclamoInternoDataSource dataInterno = new ReclamoInternoDataSource();

                    ar.com.bosoft.Modelos.ReclamoInterno nuevoInterno = new ar.com.bosoft.Modelos.ReclamoInterno(rto.getReclamo().getIdReclamo(), 
                            rto.getReclamo().getIdPresupuesto(), rto.getReclamoInterno().getNombre(), rto.getPresupuesto().getPaciente(),
                            rto.getProfesional().getNombre(), rto.getPrestacion().getNombre(), rto.getEntidad().getNombre(), 
                            rto.getReclamo().getDestinoreclamo(), rto.getReclamo().getDescripcion(), rto.getReclamo().getProcedimiento(), 
                            rto.getReclamo().getAcciones(), format.format(rto.getReclamo().getFechareclamo()), fechaCirugia);

                    dataInterno.add(nuevoInterno);
                    reporte.startReport("ReclamoInterno",param, dataInterno, salida, nombreArchivo, impresora, copias);

                case "EXTERNO":
                    param.put("id_reclamo", rto.getReclamo().getIdReclamo());
                    if (rto.getReclamo().getIdPresupuesto() != null){
                        param.put("id_cirugia", rto.getReclamo().getIdReclamo());
                        if (!rto.getPresupuesto().getPaciente().isEmpty()){
                            param.put("paciente", rto.getPresupuesto().getPaciente());
                        } else {
                            param.put("paciente", "No detallado");
                        }
                        if (rto.getPresupuesto().getIdProfesional1() != 0){
                            param.put("profesional", rto.getProfesional().getNombre());
                        } else {
                            param.put("profesional", "No detallado");
                        }
                        if (rto.getPresupuesto().getIdPrestacion() != 0){
                            param.put("prestacion", rto.getPrestacion().getNombre());
                        } else {
                            param.put("prestacion", "No detallado");
                        }
                        if (rto.getPresupuesto().getIdLugarcirugia() != 0){
                            param.put("lugarCirugia", rto.getEntidad().getNombre());
                        } else {
                            param.put("lugarCirugia", "No detallado");
                        }
                    } else {
                        param.put("id_cirugia", "No detallado");
                        param.put("paciente", "No detallado");
                        param.put("profesional", "No detallado");
                        param.put("prestacion", "No detallado");
                        param.put("lugarCirugia", "No detallado");
                    }
                    param.put("tipoReclamo", rto.getReclamoExterno().getNombre());
                    
                    
                    param.put("destinoReclamo", rto.getReclamo().getDestinoreclamo());
                    param.put("descripcion", rto.getReclamo().getDescripcion());
                    param.put("acciones", rto.getReclamo().getAcciones());
                    if (rto.getPresupuesto().getFechacirugia() != null){
                        param.put("fechaCirugia", format.format(rto.getPresupuesto().getFechacirugia()));
                    } else {
                        param.put("fechaCirugia", "No detallado");
                    }
                    param.put("fechaReclamo", format.format(rto.getReclamo().getFechareclamo()));
                    if (rto.getReclamo().getFechanotificacion() != null){
                        param.put("fechaNotificacion", format.format(rto.getReclamo().getFechanotificacion()));
                        fechaNotificacion = format.format(rto.getReclamo().getFechanotificacion());
                    } else {
                        param.put("fechaNotificacion", "No detallada");
                        fechaNotificacion = "No detallada";
                    }
                    if (rto.getReclamo().getFechadevolucion()!= null){
                        param.put("fechaDevolucion", format.format(rto.getReclamo().getFechadevolucion()));
                        fechaDevolucion = format.format(rto.getReclamo().getFechadevolucion());
                    } else {
                        param.put("fechaDevolucion", "No detallada");
                        fechaDevolucion = "No detallada";
                    }            
                    ProveedorRecord proveedor = CacheProveedores.instance().getProveedor(rto.getReclamo().getDestinoreclamo());
                    param.put("direccion", proveedor.getDireccion());
                    param.put("telefono", proveedor.getTelefono1());
                    param.put("recibe", rto.getReclamo().getRecibe());

                    ReclamoExternoDataSource dataExterno = new ReclamoExternoDataSource();

                    ar.com.bosoft.Modelos.ReclamoExterno nuevoExterno = new ar.com.bosoft.Modelos.ReclamoExterno(rto.getReclamo().getIdReclamo(), 
                            rto.getReclamoExterno().getNombre(), rto.getPresupuesto().getPaciente(), rto.getProfesional().getNombre(),
                            rto.getPrestacion().getNombre(), rto.getEntidad().getNombre(), rto.getReclamo().getDestinoreclamo(),
                            rto.getReclamo().getDescripcion(), rto.getReclamo().getAcciones(), 
                            format.format(rto.getReclamo().getFechareclamo()), fechaNotificacion, rto.getReclamo().getRecibe(), 
                            proveedor.getDireccion(), String.valueOf(proveedor.getTelefono1()));

                    dataExterno.add(nuevoExterno);
                    reporte.startReport("ReclamoExterno",param, dataExterno, this.salida, nombreArchivo, impresora, copias);

           }
    }
}
