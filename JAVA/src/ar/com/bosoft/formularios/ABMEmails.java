/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.bosoft.formularios;

import ar.com.bosoft.RenderTablas.DateRenderer;
import ar.com.bosoft.clases.Utiles;
import ar.com.bosoft.conexion.ActiveDatabase;
import ar.com.matera.TableModels.ABMEmailTableModel;
import java.util.List;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableRowSorter;
import matera.TableObjects.EmailTableObject;
import matera.cache.CacheUsuario;
import matera.cache.CacheZona;
import matera.db.managers.EmailreciptersMgr;
import matera.gui.combobox.ComboBoxMgr;
import matera.jooq.tables.records.EmailreciptersRecord;
import matera.jooq.tables.records.UsuarioRecord;
import matera.jooq.tables.records.ZonaRecord;

/**
 *
 * @author tinchogava
 */
public class ABMEmails extends javax.swing.JInternalFrame {
    ABMEmailTableModel modeloEmails;
    TableRowSorter sorterEmails;
    TableCellRenderer cellRenderer;
    List<EmailTableObject> emails;

    /**
     * Creates new form ABMEmails
     */
    public ABMEmails() {
        initComponents();
        ComboBoxMgr.fillUsuarioCombo(jComboBoxUsuarios, false);
        modeloEmails = new ABMEmailTableModel();
        modeloEmails.getPropertiesFromDefaultModel(jTableEmails.getModel());
        jTableEmails.setModel(modeloEmails);
        sorterEmails = new TableRowSorter(modeloEmails);
        cellRenderer = new DateRenderer();
        
        fillTablaEmails();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableEmails = new javax.swing.JTable();
        jComboBoxUsuarios = new javax.swing.JComboBox<>();
        jButtonAdd = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButtonUpdate = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        jTableEmails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Usuario", "Sucursal", "Email"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableEmails.getTableHeader().setReorderingAllowed(false);
        jTableEmails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableEmailsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableEmails);

        jButtonAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/32x32/rollover/unoabajo.png"))); // NOI18N
        jButtonAdd.setText("Agregar");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jLabel1.setText("Usuario:");

        jButtonUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/24x24/enabled/recarga.png"))); // NOI18N
        jButtonUpdate.setText("Actualizar");
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/32x32/enabled/limpiar.png"))); // NOI18N
        jButton1.setText("Quitar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jComboBoxUsuarios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonAdd)
                .addContainerGap(132, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jButtonUpdate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(45, 45, 45))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxUsuarios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAdd)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonUpdate)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        UsuarioRecord usuarioRecord = CacheUsuario.instance().getUsuario(ComboBoxMgr.getSelectedId(jComboBoxUsuarios));
        ZonaRecord zonaRecord = CacheZona.instance().getZona(usuarioRecord.getIdZona() == 0 
                ? 1 : usuarioRecord.getIdZona());
        EmailreciptersRecord emailrecipterRecord = new EmailreciptersRecord();
        emailrecipterRecord.setIdusuario(usuarioRecord.getIdUsuario());
        emailrecipterRecord.setIdzona(zonaRecord.getIdZona());
        emailrecipterRecord.setEmailaddress(usuarioRecord.getEmail());
        
        EmailTableObject usuarioAdded = new EmailTableObject(emailrecipterRecord, usuarioRecord, zonaRecord);
        modeloEmails.addRow(usuarioAdded);
        
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jTableEmailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableEmailsMouseClicked
        
    }//GEN-LAST:event_jTableEmailsMouseClicked

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed
        for(int i = 0; i < modeloEmails.getRowCount(); i ++){
            EmailreciptersRecord emailreciptersRecord = modeloEmails.getRow(i).getEmailrecipters();
            emailreciptersRecord.attach(ActiveDatabase.getDSLContext().configuration());
            emailreciptersRecord.setIdmodulo(1);
            emailreciptersRecord.setEnabled(1);
            emailreciptersRecord.store();
        }
        Utiles.showMessage("Se actualizó el listado correctamente");
        
    }//GEN-LAST:event_jButtonUpdateActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        EmailreciptersRecord emailreciptersRecord = modeloEmails.getRow(jTableEmails.getSelectedRow()).getEmailrecipters();
        emailreciptersRecord.attach(ActiveDatabase.getDSLContext().configuration());
        Utiles.showMessage("Se eliminó " + modeloEmails.getRow(jTableEmails.getSelectedRow()).getUsuario().getNombre()
                + " del listado de destinatarios");
        emailreciptersRecord.delete();
        modeloEmails.removeRow(jTableEmails.getSelectedRow());
        
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JComboBox<String> jComboBoxUsuarios;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableEmails;
    // End of variables declaration//GEN-END:variables

    private void fillTablaEmails() {
        try{
            modeloEmails.removeAllRows();
            modeloEmails.fireTableDataChanged();
        
            emails = EmailreciptersMgr.getTableEmailRecipters();
            
            emails.forEach(eto->{
                modeloEmails.addRow(eto);
            });
            
            if(emails.isEmpty()){
                Utiles.showMessage("No se encontraron Emails asociados");
            }
            
        } catch(Exception e){
            Utiles.showErrorMessage(e);
        }
    }
}
